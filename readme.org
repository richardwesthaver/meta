# Created 2021-11-20 Sat 03:40
#+title: meta
This project contains documents I've written in plain-text used to
generate my [[https://rwest.io][website]] and readme files for code hosted at [[https://hg.rwest.io/][hg.rwest.io]].

#+results: meta-make-tbl
| info    |                                                                                                                       |
|---------+-----------------------------------------------------------------------------------------------------------------------|
| name    | [[https://rwest.io/m#meta][meta]]                                                                                     |
| version | alpha-0.1                                                                                                             |
| vc      | [[https://hg.rwest.io/meta/rev/267dd04e90d7][78+:267dd04e90d7]], [[https://github.com/richardwesthaver/meta][github]] |
| updated | 3 hours ago                                                                                                           |
| lines   | 7069 = Î»:6561 #:29 _:479                                                                                              |
| langs   | (Org)                                                                                                                 |
|---------+-----------------------------------------------------------------------------------------------------------------------|

#+results: meta-files
| file       | size |          updated |
|------------+------+------------------|
| cv.org     | 3.8K | 2021-10-27-20:37 |
| index.org  | 4.6K | 2021-11-17-23:56 |
| m.org      | 39K  | 2021-11-19-23:57 |
| n.org      | 229K | 2021-11-14-17:37 |
| ox.setup   | 580  | 2021-11-14-23:06 |
| readme.org | 11K  | 2021-11-19-23:40 |
#+results: 
: parent: 79:879b9d6b73b3 tip
:  added rambles
: branch: default
: commit: (clean)
: update: (current)
* scripts
** deploy
This is the script for deploying metas. It usually takes a few minutes
to run and chains together a bunch of code blocks, but is otherwise
fully automated.

#+name: meta-prod-vars
| key   | val              | notes             |
|-------+------------------+-------------------|
| wd    | ~/shed/src/meta/ | working directory |
| files |                  | input files       |
| rh    | /sshx:hyde:      | remote host       |
| o     | o/               | output directory  |

This block is the main entry point that gets executed - each call to
=org-sbx= (a custom function based on =org-sbe=) executes the contents
of a named code block.

#+name: meta-deploy-main
#+begin_src emacs-lisp
  (org-sbx meta-tmp)
  (org-sbx meta-pub)
  (org-sbx meta-pack)
  (org-sbx meta-deploy)
  (org-sbx meta-readme-gen)
  (org-sbx meta-clean)
  ;(org-sbx meta-commit)
  (org-sbx meta-mirror)
#+end_src

First we generate the output directory and copy source files there.
This ensures the root project directory isn't polluted on export. You
could also do an initial export to generate pre-parsed files (with
comments and headings tagged with =noexport= removed) in the output
directory instead of copying the raw source. This is great for docs
with sensitive info, but I prefer the copy method for public projects.

#+name: meta-tmp
#+begin_src emacs-lisp
  (let ((path (concat o "org/"))
        (files (list "m.org" "n.org" "index.org" "cv.org" "ox.setup")))
    (make-directory path t)
    (dolist (f files)
      (copy-file f path t))
    (message "created meta-tmp dir"))
#+end_src

Org has integrated [[https://orgmode.org/manual/Exporting.html][exporting]] powered by [[https://orgmode.org/worg/exporters/ox-docstrings.html][ox.el]] - an emacs-lisp script
is all that is needed to generate conventional formats like HTML,
Markdown, PDF, and txt. Exported files are saved in separate
directories.

#+name: meta-pub
#+begin_src emacs-lisp
  (require 'ox)
  (require 'org-refile)
  (require 'htmlize "~/shed/data/emacs/lisp/contrib/htmlize/htmlize.el")
  (require 'org-id)
  (setq org-html-validation-link nil
        ;;        org-html-htmlize-output-type 'css
        org-export-with-author nil)

  (load-theme 'modus-operandi)
  (setq org-publish-project-alist
        '(("org-html"
  	 :author "ellis"
  	 :email "ellis@rwest.io"
  	 :base-directory "~/shed/src/meta/o/org"
  	 :base-extension "org"
  	 :with-date (current-time)
  	 :publishing-directory "~/shed/src/meta/o/html"
  	 :publishing-function org-html-publish-to-html
  	 :htmlize-source t
  	 :auto-sitemap nil)
  	("org-md"
  	 :author "ellis"
  	 :email "ellis@rwest.io"
  	 :base-directory "~/shed/src/meta/o/org"
  	 :base-extension "org"
  	 :with-date (current-time)
  	 :publishing-directory "~/shed/src/meta/o/md"
  	 :recursive t
  	 :publishing-function org-md-publish-to-md
  	 :auto-sitemap nil)
  	("org-pdf"
  	 :author "ellis"
  	 :email "ellis@rwest.io"
  	 :base-directory "~/shed/src/meta/o/org"
  	 :base-extension "org"
  	 :with-date (current-time)
  	 :publishing-directory "~/shed/src/meta/o/pdf"
  	 :recursive t
  	 :publishing-function org-latex-publish-to-pdf
  	 :auto-sitemap nil)
  	("org-txt"
  	 :author "ellis"
  	 :email "ellis@rwest.io"
  	 :base-directory "~/shed/src/meta/o/org"
  	 :base-extension "org"
  	 :with-date (current-time)
  	 :publishing-directory "~/shed/src/meta/o/txt"
  	 :recursive t
  	 :publishing-function org-ascii-publish-to-ascii
  	 :auto-sitemap nil)
  	("all" :components ("org-html" "org-md" "org-pdf" "org-txt"))))

  (org-publish-remove-all-timestamps)
  (org-refile-cache-clear)
  (org-publish "all" t)
  (load-theme current-theme)
#+end_src

First we clean some of the junk latex produced by the PDF export, then
compress our exports to =.tz= (tar.zst) archives.

#+name: meta-pack
#+begin_src sh
  cd $o/org
  rm -rf *.pdf *.tex
  cd ..
  for i in $(find ./* -maxdepth 0 -type d);
  do
      shc pack $i
  done
#+end_src

All build artifacts are transferred over SSH to a public web
server. New content can now be viewed online at [[https://rwest.io][rwest.io]] and
downloaded at [[https://rwest.io/x][rwest.io/x]] which includes archives and individual files
in all formats.

#+name: meta-deploy
#+begin_src emacs-lisp
  (copy-file o (concat rh "x/") 1)
  (dolist (f files)
    (copy-file (concat o "html/" f) rh 1))
  (copy-file (concat o "pdf/cv.pdf") rh 1)
#+end_src


Next we execute a helper function from my [[#cfg:emacs][emacs config]]. This function
scans the current file (=m.org=) and generates individual =readme.org=
files for our projects.

#+name: meta-readme-gen
#+begin_src emacs-lisp
  (org-export-headings-to-org)
#+end_src

Here's the docstring for =org-export-headings-to-org=:
#+begin_quote
Export all subtrees that are *not* tagged with :noexport: to
separate files.

Subtrees that do not have the :EXPORT_FILE_NAME: property set
are exported to a filename derived from the headline text.
#+end_quote

What's going on here? Well to start, we are indeed using the
=:EXPORT_FILE_NAME:= property in our headlines. This allows us to
generate the same 'filename' (=readme.org=) in respective project
directories. They also look quite nice on GitHub without any
additional configuration ;).

Before we talk about github stuff, let's commit the readme changes for
our projects - first let's clean up build artifacts.
#+name: meta-clean
#+begin_src shell
  rm -rf o
#+end_src

Now we can commit without being skeptical about the repo state.

#+name: meta-commit
#+begin_src shell
  for i in shed rlib tenex babel cfg demo meta; do
      cd ~/shed/src/$i && hg ci -m 'meta-commit update'
  done
#+end_src

Ok, now let's push our changes to github. Note that this creates lots
of commits, but we don't really care since it's a mirror. I'm just
testing this as an alternative approach to a 'pure' VC mirror which
would include all commits, branches, etc. I'll probably just switch
back to the [[https://hg-git.github.io/][hg-git]] 'pure' solution soon.

#+name: meta-mirror
#+begin_src bash
  REPOS=("meta" "shed" "babel" "cfg" "tenex" "rlib")
  WD=$STAMP
  for r in ${REPOS[@]}; do
      src=$SHED/src/$r
      gh=git@github.com:richardwesthaver/$r.git
      rm -rf $WD/$r
      git clone $gh $WD/$r
      pushd $WD/$r
      case $r in
  	meta) cp -rf $src/{m.org,n.org,cv.org,index.org,ox.setup,readme.org} ./ ;;
  	shed) cp -rf $src/{Cargo.toml,build.rs,lisp,makefile,src,readme.org,rustfmt.toml} ./ ;;
  	babel) cp -rf $src/{babel.el,lob.org,readme.org,makefile,sc} ./ ;;
  	rlib) cp -rf $src/{Cargo.toml,.cargo,rustfmt.toml,src,alch,audio,crypto,db,eve,flate,fu,hash,kala,logger,math,net,obj,organ,tests,ui,util,readme.org} ./ ;;
  	cfg) cp -rf $src/{emacs,mail,shell,term,tmux,vc,virt,wm,readme.org} ./ ;;
  	tenex) cp -rf $src/{src,aws,google,readme.org,rustfmt.toml,Cargo.toml} ./ ;;
      esac
      git add .
      git commit -m "from https://hg.rwest.io/$r"
      git push
      popd
  done
#+end_src

* syntax
The source files assume some familiarity with org syntax. Org syntax
is covered [[https://orgmode.org/worg/dev/org-syntax.html][online]] in detail and high-level info about document
structure can be found in the [[info:emacs#Top][Emacs manual]].

[[https://rwest.io/a/img/org-mode-features_display.png]]

All docs are fully compliant with org, with the addition of some
special *elements*:

- props :: \\
  - All nodes have an optional number of =props= which are simply list
    items starting with =+= followed by the =prop-key= an assignment
    operator (=--=, =<-=, =->=), and a =prop-val=.
    #+begin_example
      # [+] [KEY] [OP] [VAL]
      + what -- an example
    #+end_example
  - the =prop-val= type is determined by the operator. It can be a
    string =--=, list =->=, or empty =<-=.
  - =props= can appear anywhere in the =section= element of a node
    (not just immediately following properties drawer). With the
    condition that they can't be embedded (props in =prop-val=).
- drawers :: \\
     Org-mode has a feature called drawers, which are collapsible
     sections of text starting with =:DRAWER_NAME:= and ending with
     =:END:=. The most common one seen in our docs is the PROPERTIES
     drawer, but there are a few special ones we use, especially in
     =n.org=: =note=, =opinion=, =props= =boris=.
- links :: 
     In addition to the default links, we use a few custom links, most
     notably =yt= which embeds a video from youtube.
     :note:
     This is not good for users, since the embedded youtube links include
     tracking and other nasty bits from Google. In the future these links
     will be migrated to =cdn= to avoid that, increasing user privacy and
     greatly improving page load time.
     :END:
     =cdn=, =src=, and =rw= links all point to =rwest.io=.
